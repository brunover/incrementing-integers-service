{"version":3,"sources":["components/NoMatch/NoMatch.jsx","components/Header/Header.jsx","utils/utils.js","utils/api.js","components/Dashboard/Dashboard.jsx","components/Login/Login.jsx","components/Loader/Loader.jsx","components/Routes/Routes.jsx","components/App/App.jsx","serviceWorker.js","index.js"],"names":["NoMatch","Body","type","window","location","href","Component","Header","user","this","props","className","logo","alt","src","productTitle","profile","glyph","colorAccent","initials","userName","email","profileMenu","callback","alert","name","size","qs","require","serializeObj","obj","stringify","axios","token","localStorage","protocol","hostname","api","create","baseURL","headers","Authorization","getUser","id","get","then","res","data","getInteger","patchInteger","body","patch","Dashboard","_isMounted","state","isLoadingUser","isLoadingInteger","error","success","fetchUser","safeSetState","catch","console","response","requestNewInteger","status","resetInteger","current","prompt","trim","isNaN","Number","setState","newStateObj","warn","message","description","title","Actions","onClick","cols","Content","int_value","Login","PureComponent","Loader","renderSpinner","sizeClass","toLowerCase","aria-hidden","aria-label","renderSynchronizer","animate","icon","display","defaultProps","Routes","exact","from","to","path","component","App","Boolean","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3afb8cf2.chunk.js","sourcesContent":["import React, { Component } from \"react\"\r\nimport { Alert, Panel } from \"fundamental-react\"\r\n\r\n// NoMatch renders a 404 page when the path does not match any route\r\nexport default class NoMatch extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Panel>\r\n          <Panel.Body>\r\n            <Alert type='warning'>\r\n              <h3>Page not found - 404</h3>\r\n              <p>{window.location.href}</p>\r\n            </Alert>\r\n          </Panel.Body>\r\n        </Panel>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { Shellbar } from \"fundamental-react\"\r\n\r\n// Header contains the Shell bar component from Fiori Fundamentals\r\nexport default class Header extends Component {\r\n  static propTypes = {\r\n    user: PropTypes.object.isRequired\r\n  }\r\n\r\n  render() {\r\n    const { user } = this.props\r\n\r\n    return (\r\n      <div className='fd-container'>\r\n        <Shellbar\r\n          logo={<img alt='Incrementing Integer Service' src='/logo.png' />}\r\n          productTitle='Incrementing Integer Service'\r\n          profile={{\r\n            glyph: \"settings\",\r\n            colorAccent: 4,\r\n            initials: \"...\",\r\n            userName: user.email || \"No user\"\r\n          }}\r\n          profileMenu={[\r\n            {\r\n              callback: () => {\r\n                alert(\"Signing out!\")\r\n              },\r\n              glyph: \"log\",\r\n              name: \"Sign Out\",\r\n              size: \"s\"\r\n            }\r\n          ]}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","const qs = require(\"querystring\")\r\nexport const ONE_KILOBYTE = 1024\r\nexport const ONE_MEGABYTE = 1048576\r\n\r\n// Given a file size in bytes, makes it more readable\r\nexport const formatFileSize = size => {\r\n  if (size < ONE_KILOBYTE) {\r\n    return size + \" byte\" + (size === 1 ? \"\" : \"s\")\r\n  } else if (size >= ONE_KILOBYTE && size < ONE_MEGABYTE) {\r\n    return (size / ONE_KILOBYTE).toFixed(1) + \"KB\"\r\n  } else {\r\n    return (size / ONE_MEGABYTE).toFixed(1) + \"MB\"\r\n  }\r\n}\r\n\r\n// Find and returns the key associated to a value in a javascript Map object\r\nexport const getKeyByValue = (map, value) => {\r\n  const entry = [...map].find(([_, mapVal]) => mapVal.includes(value))\r\n  // If an entry was found return its key (first index)\r\n  return entry ? entry[0] : null\r\n}\r\n\r\n// Serialize a obj to make it valid for request POST\r\nexport const serializeObj = obj => qs.stringify(obj)\r\n\r\n// Formats a code snippet to highlight the piece of code which matches the content\r\nexport const formatSnippet = (snippet, content, maxCharQty = 200) => {\r\n  // First try to format snippet to have the maximum characters informed by the parameter\r\n  const offset = content.length * 2\r\n  if (snippet.length > maxCharQty && snippet.length > offset) {\r\n    try {\r\n      const indexOfContent = snippet.indexOf(content)\r\n      const start = indexOfContent - offset\r\n      const end = indexOfContent + content.length + offset\r\n      snippet = snippet.substring(start, end)\r\n    } catch (error) {\r\n      console.error(error)\r\n    }\r\n  }\r\n  const newSnippet = snippet\r\n    // Here we add white spaces to angle brackets to avoid\r\n    // the browser interpreting the content as HTML tags\r\n    .replace(/</g, \" < \")\r\n    .replace(/>/g, \" > \")\r\n    // After that we add a <mark> tag to the original content,\r\n    // it will insert a highlighting yellow background\r\n    .replace(content, `<mark>${content}</mark>`)\r\n  return newSnippet\r\n}\r\n\r\n// Case insensitive sort function for string values\r\nexport const sortByKey = (key = \"Name\", isDesc = false) => {\r\n  return isDesc\r\n    ? (a, b) => b[key].localeCompare(a[key])\r\n    : (a, b) => a[key].localeCompare(b[key])\r\n}\r\n\r\n// Sort function for Date values\r\nexport const sortByDate = (key = \"Started\", isDesc = false) => {\r\n  return isDesc\r\n    ? (a, b) => new Date(b[key]) - new Date(a[key])\r\n    : (a, b) => new Date(a[key]) - new Date(b[key])\r\n}\r\n","const axios = require(\"axios\")\r\n\r\n// Token will be provided by OAuth in the future\r\nlet token = localStorage.token\r\nif (!token) {\r\n  token = localStorage.token = \"1234567\"\r\n}\r\n\r\n// Axios instance configuration for the main api\r\nconst protocol = window.location.protocol\r\nconst hostname = window.location.hostname\r\nconst api = axios.create({\r\n  baseURL: `${protocol}//${hostname}/api/v1`,\r\n  headers: {\r\n    \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n    Authorization: `Bearer ${token}`\r\n  }\r\n})\r\n\r\n// -------------------------------------\r\n// USERS API\r\nexport const getUser = id => api.get(`/users/${id}`).then(res => res.data)\r\n\r\nexport const getInteger = id => api.get(`/users/${id}/next`).then(res => res)\r\n\r\nexport const patchInteger = (id, body) => {\r\n  return api.patch(`/users/${id}/current`, body).then(res => res)\r\n}\r\n","import React, { Component } from \"react\"\r\nimport { serializeObj } from \"../../utils/utils\"\r\nimport { getUser, getInteger, patchInteger } from \"../../utils/api\"\r\nimport { Header, Loader } from \"../components\"\r\nimport {\r\n  Panel,\r\n  PanelGrid,\r\n  Tile,\r\n  ActionBar,\r\n  Status,\r\n  Button\r\n} from \"fundamental-react\"\r\n\r\nexport default class Dashboard extends Component {\r\n  _isMounted = false\r\n\r\n  state = {\r\n    isLoadingUser: true,\r\n    isLoadingInteger: false,\r\n    error: null,\r\n    success: null,\r\n    user: {}\r\n  }\r\n\r\n  safeSetState(newStateObj) {\r\n    if (this._isMounted) {\r\n      this.setState(newStateObj)\r\n    } else {\r\n      console.warn(\r\n        `State was not updated because component is unmounted`,\r\n        newStateObj\r\n      )\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this._isMounted = false\r\n  }\r\n\r\n  componentDidMount() {\r\n    this._isMounted = true\r\n    this.fetchUser(1)\r\n  }\r\n\r\n  fetchUser = id => {\r\n    return getUser(id)\r\n      .then(data => {\r\n        const user = data || []\r\n        this.safeSetState({ isLoadingUser: false, user })\r\n      })\r\n      .catch(error => {\r\n        console.error(error.response)\r\n        this.safeSetState({ isLoadingUser: false, error })\r\n      })\r\n  }\r\n\r\n  requestNewInteger = id => {\r\n    this.safeSetState({ isLoadingInteger: true })\r\n    getInteger(id)\r\n      .then(res => {\r\n        if (res.status === 200) {\r\n          this.fetchUser(id)\r\n          this.safeSetState({ isLoadingInteger: false })\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error(error.response)\r\n        this.safeSetState({ isLoadingInteger: false, error })\r\n      })\r\n  }\r\n\r\n  resetInteger = id => {\r\n    let current = window.prompt(\r\n      \"Inform the new integer value (bigger than zero):\"\r\n    )\r\n    if (!current) return\r\n    current = current.trim()\r\n    if (isNaN(current)) {\r\n      alert(\"You must provide a number\")\r\n      return\r\n    }\r\n    current = Number(current)\r\n    if (current < 0) {\r\n      alert(\"You must provide a number bigger than zero\")\r\n      return\r\n    }\r\n    this.safeSetState({ isLoadingInteger: true })\r\n    patchInteger(id, serializeObj({ current }))\r\n      .then(res => {\r\n        if (res.status === 200) {\r\n          this.fetchUser(id)\r\n          this.safeSetState({ isLoadingInteger: false })\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error(error.response)\r\n        this.setState({ isLoadingInteger: false, error })\r\n      })\r\n  }\r\n\r\n  render() {\r\n    const { isLoadingUser, isLoadingInteger, error, user } = this.state\r\n\r\n    return (\r\n      <div className='fd-container fd-container--centered'>\r\n        <Header user={user} />\r\n        <div className='fd-container'>\r\n          <div className='fd-has-margin-bottom-medium'>\r\n            <div className='fd-container'>\r\n              <Panel>\r\n                <Panel.Body>\r\n                  {/* Display a message if we encounter an error */}\r\n                  {error && (\r\n                    <Status type='error' glyph='message-error'>\r\n                      {error.message}\r\n                    </Status>\r\n                  )}\r\n\r\n                  {/* General info section */}\r\n                  <ActionBar>\r\n                    <ActionBar.Header\r\n                      description='Request the next integer or reset the value of the current one'\r\n                      title='Your personal integer'\r\n                    />\r\n                    <ActionBar.Actions>\r\n                      <Button\r\n                        glyph='add'\r\n                        onClick={() => this.requestNewInteger(user.id || 0)}>\r\n                        Request New Integer\r\n                      </Button>\r\n                      <Button\r\n                        glyph='refresh'\r\n                        onClick={() => this.resetInteger(user.id || 0)}>\r\n                        Reset My Integer\r\n                      </Button>\r\n                    </ActionBar.Actions>\r\n                  </ActionBar>\r\n\r\n                  {/* Counters */}\r\n                  {isLoadingUser ? (\r\n                    // Loading data from api\r\n                    <Loader />\r\n                  ) : (\r\n                    // Data was fetched\r\n                    <PanelGrid cols={2}>\r\n                      <Panel>\r\n                        <Panel.Body>\r\n                          <Tile>\r\n                            <Tile.Content title='User'>\r\n                              <p className='fd-has-type-4'>\r\n                                {user.email || \"No user\"}\r\n                              </p>\r\n                            </Tile.Content>\r\n                          </Tile>\r\n                        </Panel.Body>\r\n                      </Panel>\r\n                      <Panel>\r\n                        <Panel.Body>\r\n                          <Tile>\r\n                            <Tile.Content title='Current Integer'>\r\n                              <p className='fd-has-type-4'>\r\n                                {user.int_value || 0}\r\n                                {isLoadingInteger && (\r\n                                  <Loader size='s' type='synch' />\r\n                                )}\r\n                              </p>\r\n                            </Tile.Content>\r\n                          </Tile>\r\n                        </Panel.Body>\r\n                      </Panel>\r\n                    </PanelGrid>\r\n                  )}\r\n                </Panel.Body>\r\n              </Panel>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { PureComponent } from \"react\"\r\n\r\nexport default class Login extends PureComponent {\r\n  render() {\r\n    return <div>LOGIN</div>\r\n  }\r\n}\r\n","import React, { Component } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\n\r\nexport default class Loader extends Component {\r\n  static propTypes = {\r\n    display: PropTypes.bool,\r\n    type: PropTypes.oneOf([\"spin\", \"synch\"]),\r\n    size: PropTypes.oneOf([\"s\", \"m\", \"l\"]),\r\n    animate: PropTypes.oneOf([\"spin\", \"pulse\"]),\r\n    icon: PropTypes.string\r\n  }\r\n\r\n  static defaultProps = {\r\n    display: true,\r\n    type: \"spin\",\r\n    size: \"m\",\r\n    animate: \"spin\",\r\n    icon: \"synchronize\"\r\n  }\r\n\r\n  renderSpinner = ({ size }) => {\r\n    let sizeClass = \"\"\r\n    if (size) {\r\n      switch (size.toLowerCase()) {\r\n        case \"s\": {\r\n          sizeClass = \"fd-loading-spinner--small\"\r\n          break\r\n        }\r\n        case \"l\": {\r\n          sizeClass = \"fd-loading-spinner--large\"\r\n          break\r\n        }\r\n        default: {\r\n          sizeClass = \"\"\r\n          break\r\n        }\r\n      }\r\n    }\r\n    return (\r\n      <div\r\n        className={`fd-loading-spinner ${sizeClass}`}\r\n        aria-hidden='false'\r\n        aria-label='Loading'></div>\r\n    )\r\n  }\r\n\r\n  renderSynchronizer = ({ size, animate, icon }) => {\r\n    return (\r\n      <span\r\n        className={`\r\n          fd-has-margin-x-tiny \r\n          sap-icon--${icon} \r\n          sap-icon--${size} \r\n          sap-icon--animate-${animate}\r\n        `}\r\n      />\r\n    )\r\n  }\r\n\r\n  render() {\r\n    const { display, type } = this.props\r\n    // If received the display \"false\" props, does not render the loader\r\n    if (!display) return null\r\n    // Check which type to render\r\n    if (type.toLowerCase() === \"synch\") {\r\n      // Synchronizer type\r\n      return this.renderSynchronizer(this.props)\r\n    } else {\r\n      // Renders the default spinner if no type was passed via props\r\n      return this.renderSpinner(this.props)\r\n    }\r\n  }\r\n}\r\n","import React, { Component } from \"react\"\r\nimport { Route, Switch, Redirect } from \"react-router-dom\"\r\nimport { Dashboard, Login, NoMatch } from \"../components\"\r\n\r\nexport default class Routes extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Switch>\r\n          {/* Dashboard */}\r\n          <Redirect exact from='/' to='/dashboard' />\r\n          <Route path='/dashboard' component={Dashboard} />\r\n          {/* Login */}\r\n          <Route exact path='/login' component={Login} />\r\n          {/* 'NoMatch' route should always be the last one (it acts as a 'default' case) */}\r\n          <Route path='' component={NoMatch} />\r\n        </Switch>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from \"react\"\r\nimport Routes from \"../Routes/Routes\"\r\nimport \"../../styles/App.css\"\r\n\r\nexport default class App extends Component {\r\n  render() {\r\n    return <Routes />\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport App from \"./components/App/App\"\r\nimport * as serviceWorker from \"./serviceWorker\"\r\nimport { BrowserRouter } from \"react-router-dom\"\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}